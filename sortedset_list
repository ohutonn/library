from math import sqrt, ceil
from bisect import bisect_left, bisect_right
from typing import Iterable, TypeVar, Union, Tuple
T = TypeVar("T")

class SortedSet:
    BUCKET_RATIO = 50
    REBUILD_RATIO = 170
 
    @classmethod
    def _new_bucket_size(cls, size: int) -> int:
        return int(ceil(sqrt(size / cls.BUCKET_RATIO)))
 
    def _build(self, a: list):
        size = self.size = len(a)
        bucket_size = self._new_bucket_size(self.size)
        self.a = [
            a[size * i // bucket_size : size * (i + 1) // bucket_size]
            for i in range(bucket_size)
        ]
 
    def __init__(self, a: Iterable = []):
        "Make a new SortedSet from iterable. / O(N) if sorted and unique / O(N log N)"
        a = list(a)
        if not all(a[i] < a[i + 1] for i in range(len(a) - 1)):
            a = sorted(set(a))
        self._build(a)
 
    def __iter__(self):
        for i in self.a:
            for j in i:
                yield j
 
    def __reversed__(self):
        for i in reversed(self.a):
            for j in reversed(i):
                yield j
 
    def __len__(self) -> int:
        return self.size
 
    def __repr__(self) -> str:
        return str(self.a)
 
    def __str__(self) -> str:
        s = str(list(self))
        return "{" + s[1 : len(s) - 1] + "}"
 
    def _bucket_index(self, x: T) -> int:
        "Find the index of the bucket which should contain x. / O(log N)"
        ok = -1
        ng = len(self.a)
        a = self.a
        while ng - ok > 1:
            mid = (ng + ok) >> 1
            if a[mid][0] <= x:
                ok = mid
            else:
                ng = mid
        if ok == -1:
            return 0
        if ng == len(self.a):
            return ok
        if a[ok][-1] < x:
            return ok + (len(a[ok]) > len(a[ok + 1]))
        return ok
 
    def __contains__(self, x: T) -> bool:
        "O(log N)"
        if self.size == 0:
            return False
        a = self.a[self._bucket_index(x)]
        i = bisect_left(a, x)
        return i != len(a) and a[i] == x
 
    def add(self, x: T) -> bool:
        "Add an element and return True if added. / O(N ** 0.5)"
        if self.size == 0:
            self._build([x])
            return True
        a = self.a[self._bucket_index(x)]
        i = bisect_left(a, x)
        if i != len(a) and a[i] == x:
            return False
        a.insert(i, x)
        self.size += 1
        if len(a) > len(self.a) * self.REBUILD_RATIO:
            self._build(list(self))
        return True
 
    def discard(self, x: T) -> bool:
        "Remove an element and return True if removed. / O(N ** 0.5)"
        if self.size == 0:
            return False
        a = self.a[self._bucket_index(x)]
        i = bisect_left(a, x)
        if i == len(a) or a[i] != x:
            return False
        a.pop(i)
        self.size -= 1
        if len(a) == 0:
            self._build(list(self))
        return True
 
    def lt(self, x: T) -> Union[T, None]:
        "Return the largest element < x, or None if it doesn't exist. / O(log N)"
        if self.size == 0:
            return None
        i = self._bucket_index(x)
        a = self.a
        if a[i][0] >= x:
            return a[i - 1][-1] if i else None
        return a[i][bisect_left(a[i], x) - 1],bisect_left(a[i], x) - 1
 
    def le(self, x: T) -> Union[T, None]:
        "Return the largest element <= x, or None if it doesn't exist. / O(log N)"
        if self.size == 0:
            return None
        i = self._bucket_index(x)
        a = self.a
        if a[i][0] > x:
            return a[i - 1][-1] if i else None
        return a[i][bisect_right(a[i], x) - 1],bisect_right(a[i], x) - 1
 
    def gt(self, x: T) -> Union[T, None]:
        "Return the smallest element > x, or None if it doesn't exist. / O(log N)"
        if self.size == 0:
            return None
        i = self._bucket_index(x)
        a = self.a
        if a[i][-1] <= x:
            return a[i + 1][0] if i + 1 < len(self.a) else None
        return a[i][bisect_right(a[i], x)],bisect_right(a[i], x)
 
    def ge(self, x: T) -> Union[T, None]:
        "Return the smallest element >= x, or None if it doesn't exist. / O(log N)"
        if self.size == 0:
            return None
        i = self._bucket_index(x)
        a = self.a
        if a[i][-1] < x:
            return a[i + 1][0] if i + 1 < len(self.a) else None
        return a[i][bisect_left(a[i], x)],bisect_left(a[i], x)
 
    def __getitem__(self, x: int) -> T:
        "Take (i, j) and return the j-th element in the i-th bucket, or IndexError if it doesn't exist. / O(1)"
        "Take x and return the x-th element, or IndexError if it doesn't exist. / O(N ** 0.5) (fast)"
        if isinstance(x, tuple):
            return self.a[x[0]][x[1]]
        if x < 0:
            x += self.size
        if x < 0 or x >= self.size:
            raise IndexError
        for a in self.a:
            if x < len(a):
                return a[x]
            x -= len(a)
        assert False
 
    def index(self, x: T) -> int:
        "Return the index of x, or ValueError if it doesn't exist. / O(N ** 0.5) (fast)"
        if self.size == 0:
            raise ValueError
        idx = self._bucket_index(x)
        a = self.a[idx]
        i = bisect_left(a, x)
        if i == len(a) or a[i] != x:
            raise ValueError
        for j in range(idx):
            i += len(self.a[j])
        return i
 
    def lower_bound(self, x: T) -> Tuple[int, int]:
        "Find the smallest element self.a[i][j] >= x and return (i, j), or (len(a), 0) if it doesn't exist. / O(log N)"
        if self.size == 0:
            return (0, 0)
        i = self._bucket_index(x)
        a = self.a
        if a[i][-1] < x:
            return (i + 1, 0)
        return (i, bisect_left(a[i], x))
 
    def upper_bound(self, x: T) -> Tuple[int, int]:
        "Find the smallest element self.a[i][j] > x and return (i, j), or (len(a), 0) if it doesn't exist. / O(log N)"
        if self.size == 0:
            return (0, 0)
        i = self._bucket_index(x)
        a = self.a
        if a[i][-1] <= x:
            return (i + 1, 0)
        return (i, bisect_right(a[i], x))
      

    def debug(self):
      return [self.__getitem__(i) for i in range(self.size)]
    
S = SortedSet()


class SortedList:
    def __init__(self, iterable=[], _load=200):
        """Initialize sorted list instance."""
        values = sorted(iterable)
        self._len = _len = len(values)
        self._load = _load
        self._lists = _lists = [values[i : i + _load] for i in range(0, _len, _load)]
        self._list_lens = [len(_list) for _list in _lists]
        self._mins = [_list[0] for _list in _lists]
        self._fen_tree = []
        self._rebuild = True
 
    def _fen_build(self):
        """Build a fenwick tree instance."""
        self._fen_tree[:] = self._list_lens
        _fen_tree = self._fen_tree
        for i in range(len(_fen_tree)):
            if i | i + 1 < len(_fen_tree):
                _fen_tree[i | i + 1] += _fen_tree[i]
        self._rebuild = False
 
    def _fen_update(self, index, value):
        """Update `fen_tree[index] += value`."""
        if not self._rebuild:
            _fen_tree = self._fen_tree
            while index < len(_fen_tree):
                _fen_tree[index] += value
                index |= index + 1
 
    def _fen_query(self, end):
        """Return `sum(_fen_tree[:end])`."""
        if self._rebuild:
            self._fen_build()
 
        _fen_tree = self._fen_tree
        x = 0
        while end:
            x += _fen_tree[end - 1]
            end &= end - 1
        return x
 
    def _fen_findkth(self, k):
        """Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) <= k`, `k - sum(_fen_tree[:idx])`)."""
        _list_lens = self._list_lens
        if k < _list_lens[0]:
            return 0, k
        if k >= self._len - _list_lens[-1]:
            return len(_list_lens) - 1, k + _list_lens[-1] - self._len
        if self._rebuild:
            self._fen_build()
 
        _fen_tree = self._fen_tree
        idx = -1
        for d in reversed(range(len(_fen_tree).bit_length())):
            right_idx = idx + (1 << d)
            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:
                idx = right_idx
                k -= _fen_tree[idx]
        return idx + 1, k
 
    def _delete(self, pos, idx):
        """Delete value at the given `(pos, idx)`."""
        _lists = self._lists
        _mins = self._mins
        _list_lens = self._list_lens
 
        self._len -= 1
        self._fen_update(pos, -1)
        del _lists[pos][idx]
        _list_lens[pos] -= 1
 
        if _list_lens[pos]:
            _mins[pos] = _lists[pos][0]
        else:
            del _lists[pos]
            del _list_lens[pos]
            del _mins[pos]
            self._rebuild = True
 
    def _loc_left(self, value):
        """Return an index pair that corresponds to the first position of `value` in the sorted list."""
        if not self._len:
            return 0, 0
 
        _lists = self._lists
        _mins = self._mins
 
        lo, pos = -1, len(_lists) - 1
        while lo + 1 < pos:
            mi = (lo + pos) >> 1
            if value <= _mins[mi]:
                pos = mi
            else:
                lo = mi
 
        if pos and value <= _lists[pos - 1][-1]:
            pos -= 1
 
        _list = _lists[pos]
        lo, idx = -1, len(_list)
        while lo + 1 < idx:
            mi = (lo + idx) >> 1
            if value <= _list[mi]:
                idx = mi
            else:
                lo = mi
 
        return pos, idx
 
    def _loc_right(self, value):
        """Return an index pair that corresponds to the last position of `value` in the sorted list."""
        if not self._len:
            return 0, 0
 
        _lists = self._lists
        _mins = self._mins
 
        pos, hi = 0, len(_lists)
        while pos + 1 < hi:
            mi = (pos + hi) >> 1
            if value < _mins[mi]:
                hi = mi
            else:
                pos = mi
 
        _list = _lists[pos]
        lo, idx = -1, len(_list)
        while lo + 1 < idx:
            mi = (lo + idx) >> 1
            if value < _list[mi]:
                idx = mi
            else:
                lo = mi
 
        return pos, idx
 
    def add(self, value):
        """Add `value` to sorted list."""
        _load = self._load
        _lists = self._lists
        _mins = self._mins
        _list_lens = self._list_lens
 
        self._len += 1
        if _lists:
            pos, idx = self._loc_right(value)
            self._fen_update(pos, 1)
            _list = _lists[pos]
            _list.insert(idx, value)
            _list_lens[pos] += 1
            _mins[pos] = _list[0]
            if _load + _load < len(_list):
                _lists.insert(pos + 1, _list[_load:])
                _list_lens.insert(pos + 1, len(_list) - _load)
                _mins.insert(pos + 1, _list[_load])
                _list_lens[pos] = _load
                del _list[_load:]
                self._rebuild = True
        else:
            _lists.append([value])
            _mins.append(value)
            _list_lens.append(1)
            self._rebuild = True
 
    def discard(self, value):
        """Remove `value` from sorted list if it is a member."""
        _lists = self._lists
        if _lists:
            pos, idx = self._loc_right(value)
            if idx and _lists[pos][idx - 1] == value:
                self._delete(pos, idx - 1)
 
    def remove(self, value):
        """Remove `value` from sorted list; `value` must be a member."""
        _len = self._len
        self.discard(value)
        if _len == self._len:
            raise ValueError("{0!r} not in list".format(value))
 
    def pop(self, index=-1):
        """Remove and return value at `index` in sorted list."""
        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)
        value = self._lists[pos][idx]
        self._delete(pos, idx)
        return value
 
    def bisect_left(self, value):
        """Return the first index to insert `value` in the sorted list."""
        pos, idx = self._loc_left(value)
        return self._fen_query(pos) + idx
 
    def bisect_right(self, value):
        """Return the last index to insert `value` in the sorted list."""
        pos, idx = self._loc_right(value)
        return self._fen_query(pos) + idx
 
    def count(self, value):
        """Return number of occurrences of `value` in the sorted list."""
        return self.bisect_right(value) - self.bisect_left(value)
 
    def __len__(self):
        """Return the size of the sorted list."""
        return self._len
 
    def __getitem__(self, index):
        """Lookup value at `index` in sorted list."""
        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)
        return self._lists[pos][idx]
 
    def __delitem__(self, index):
        """Remove value at `index` from sorted list."""
        pos, idx = self._fen_findkth(self._len + index if index < 0 else index)
        self._delete(pos, idx)
 
    def __contains__(self, value):
        """Return true if `value` is an element of the sorted list."""
        _lists = self._lists
        if _lists:
            pos, idx = self._loc_left(value)
            return idx < len(_lists[pos]) and _lists[pos][idx] == value
        return False
 
    def __iter__(self):
        """Return an iterator over the sorted list."""
        return (value for _list in self._lists for value in _list)
 
    def __reversed__(self):
        """Return a reverse iterator over the sorted list."""
        return (value for _list in reversed(self._lists) for value in reversed(_list))
 
    def __repr__(self):
        """Return string representation of sorted list."""
        return "SortedList({0})".format(list(self))

a = SortedList()
q = int(input())
for i in range(q):
  x = list(map(int,input().split()))
  if x[0] == 1:
    a.add(x[1])
  elif x[0] == 2:
    f = a.bisect_right(x[1])
    if 0 <= f - x[2] < len(a):
      print(a[f-x[2]])
    else:
      print(-1)
  elif x[0] == 3:
    f = a.bisect_left(x[1])
    if len(a) >= x[2] + f >= 0:
      print(a[f+x[2]-1])
    else:
      print(-1)
      
a = SortedList()
