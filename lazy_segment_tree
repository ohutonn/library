競プロ典型 90 問 029 - Long Bricks（★5）
AtCoder Library Practice Contest K - Range Affine Range Sum

import sys
input = sys.stdin.buffer.readline
sys.setrecursionlimit(10 ** 7)
mod = 998244353


class SegTree(object):
    def __init__(self, N, op_data, u_data):
        self._n = N
        self.log = (N-1).bit_length()
        self.size = 1 << self.log

        self.op = op_data
        self.e = u_data

        self.data = [u_data] * (2 * self.size)
        self.len = [1] * (2 * self.size)

    def _update(self, i):
        self.data[i] = self.op(self.data[i << 1], self.data[i << 1 | 1])

    def initialize(self, arr):
        """ segtreeをarrで初期化する。len(arr) == Nにすること """
        for i, a in enumerate(arr, self.size):
            self.data[i] = a
        for i in reversed(range(1, self.size)):
            self._update(i)
            self.len[i] = self.len[i << 1] + self.len[i << 1 | 1]

    def update(self, p, x):
        """ data[p] = x とする (0-indexed)"""
        p += self.size
        self.data[p] = x
        for i in range(1, self.log + 1):
            self._update(p >> i)

    def get(self, p):
        """ data[p]を返す """
        return self.data[p + self.size]

    def prod(self, l, r):
        """
        op_data(data[l], data[l+1], ..., data[r-1])を返す (0-indexed)
        """
        sml = self.e
        smr = self.e
        l += self.size
        r += self.size

        while l < r:
            if l & 1:
                sml = self.op(sml, self.data[l])
                l += 1
            if r & 1:
                r -= 1
                smr = self.op(self.data[r], smr)
            l >>= 1
            r >>= 1
        return self.op(sml, smr)

    def all_prod(self):
        """ op(data[0], data[1], ... data[N-1])を返す """
        return self.data[1]

    def max_right(self, l, func):
        """
        func(l, l+1, ..., r-1) = True,
        func(l, l+1, ..., r-1, r) = Falseとなる r を返す
        """
        if l == self._n:
            return self._n
        l += self.size
        sm = self.e
        while True:
            while l % 2 == 0:
                l >>= 1
            if not func(self.op(sm, self.data[l])):
                while l < self.size:
                    l <<= 1
                    if func(self.op(sm, self.data[l])):
                        sm = self.op(sm, self.data[l])
                        l += 1
                return l - self.size
            sm = self.op(sm, self.data[l])
            l += 1
            if (l & -l) == l:
                break
        return self._n

    def min_left(self, r, func):
        """
        func(     l, l+1, ..., r-1) = True,
        func(l-1, l, l+1, ..., r-1) = Falseとなる l を返す
        """
        if r == 0:
            return 0
        r += self.size
        sm = self.e
        while True:
            r -= 1
            while r > 1 and r & 1:
                r >>= 1
            if not func(self.op(self.data[r], sm)):
                while r < self.size:
                    r = r << 1 | 1
                    if func(self.op(self.data[r], sm)):
                        sm = self.op(self.data[r], sm)
                        r -= 1
                return r + 1 - self.size
            sm = self.op(self.data[r], sm)
            if (r & -r) == r:
                break
        return 0


class LazySegTree(SegTree):
    def __init__(self, N, op_data, u_data, op_lazy, u_lazy, op_merge):
        super().__init__(N, op_data, u_data)
        self.composition = op_lazy
        self.mapping = op_merge
        self.id = u_lazy

        self.lazy = [u_lazy] * self.size

    def _all_apply(self, i, F):
        self.data[i] = self.mapping(F, self.data[i], self.len[i])
        if i < self.size:
            self.lazy[i] = self.composition(F, self.lazy[i])

    def _push(self, i):
        self._all_apply(i << 1, self.lazy[i])
        self._all_apply(i << 1 | 1, self.lazy[i])
        self.lazy[i] = self.id

    def update(self, p, x):
        """ data[p] = x とする (0-indexed)"""
        p += self.size
        for i in reversed(range(1, self.log + 1)):
            self._push(p >> i)
        self.data[p] = x
        for i in range(1, self.log + 1):
            self._update(p >> i)

    def apply(self, p, F):
        """ data[p]にFを作用させる(data[p] = op_merge(F, data[p])とする, 0-indexed) """
        p += self.size
        for i in reversed(range(1, self.log + 1)):
            self._push(p >> i)
        self.data[p] = self.mapping(F, self.data[p], self.len[p])
        for i in range(1, self.log + 1):
            self._update(p >> i)

    def range_apply(self, l, r, F):
        """ i = l, l+1, ..., r-1 について、Fを作用させる(op_merge(F, data[i]), 0-indexed) """
        if l == r:
            return

        l += self.size
        r += self.size
        for i in reversed(range(1, self.log + 1)):  # too->down
            if ((l >> i) << i) != l:
                self._push(l >> i)
            if ((r >> i) << i) != r:
                self._push((r - 1) >> i)

        l2, r2 = l, r
        while l < r:
            if l & 1:
                self._all_apply(l, F)
                l += 1
            if r & 1:
                r -= 1
                self._all_apply(r, F)
            l >>= 1
            r >>= 1
        l, r = l2, r2

        for i in range(1, self.log + 1):
            if ((l >> i) << i) != l:
                self._update(l >> i)
            if ((r >> i) << i) != r:
                self._update((r - 1) >> i)

    def get(self, p):
        """ data[p]を返す """
        p += self.size
        for i in reversed(range(1, self.log + 1)):
            self._push(p >> i)
        return self.data[p]

    def prod(self, l, r):
        """
        op_data(data[l], data[l+1], ..., data[r-1])を返す (0-indexed)
        l == rの時は単位元u_dataを返す
        """
        if l == r:
            return self.e

        l += self.size
        r += self.size
        for i in reversed(range(1, self.log + 1)):
            if ((l >> i) << i) != l:
                self._push(l >> i)
            if ((r >> i) << i) != r:
                self._push(r >> i)

        sml = self.e # 初期値 != 単位元のときはここを変える
        smr = self.e # ex. A = [0]*N; op_data : max(di, dj), op_lazy : old + que, -10**5<que
        while l < r:
            if l & 1:
                sml = self.op(sml, self.data[l])
                l += 1
            if r & 1:
                r -= 1
                smr = self.op(self.data[r], smr)
            l >>= 1
            r >>= 1
        return self.op(sml, smr)

    def max_right(self, l, func):
        """
        func(l, l+1, ..., r-1) = True,
        func(l, l+1, ..., r-1, r) = Falseとなる r を返す
        """
        if l == self._n:
            return self._n
        l += self.size
        for i in reversed(range(1, self.log + 1)):
            self._push(l >> i)

        sm = self.e
        while True:
            while l % 2 == 0:
                l >>= 1
            if not func(self.op(sm, self.data[[l]])):
                while l < self.size:
                    self._push(l)
                    l <<= 1
                    if func(self.op(sm, self.data[l])):
                        sm = self.op(sm, self.data[l])
                        l += 1
                return l - self.size
            sm = self.op(sm, self.data[l])
            l += 1
            if (l & -l) == l:
                break
        return self._n

    def min_left(self, r, func):
        """
        func(     l, l+1, ..., r-1) = True,
        func(l-1, l, l+1, ..., r-1) = Falseとなる l を返す
        """
        if r == 0:
            return 0
        r += self.size
        for i in reversed(range(1, self.log + 1)):
            self._push((r - 1) >> i)
        sm = self.e
        while True:
            r -= 1
            while r > 1 and r & 1:
                r >>= 1
            if not func(self.op(self.data[r], sm)):
                while r < self.size:
                    self._push(r)
                    r = r << 1 | 1
                    if func(self.op(self.data[r], sm)):
                        sm = self.op(self.data[r], sm)
                        r -= 1
                return r + 1 - self.size
            sm = self.op(self.data[r], sm)
            if (r & -r) == r:
                break
        return 0
      
    def debug(self):
        print([self.get(i) for i in range(self._n)])
        
        
# d[l,r): A[l,r)から抽出する情報      
def op_data(l, r): # d[l,m)とd[m,r)の演算, dataを返す
    return max(l, r)

def op_lazy(query, lazy_old): # lazy_oldに更新queryを作用させる, lazy_newを返す
    return max(query, lazy_old)

u_data = 0 # data の単位元
u_lazy = 0 # lazy の単位元

# lazy[i] が l≤i<r において同じ更新をしていた時に、
# d[l,r) を lazy[i] を用いて d'[l,r) に更新する, dataを返す
# size: len[l,r) = r-1-l, d[l,r) = sum(A[l,r)) とかで使う
def op_merge(lazy_i, d, size):
    return max(lazy_i, d)
    

w, n = map(int, input().split())
seg = LazySegTree(w, op_data, u_data, op_lazy, u_lazy, op_merge)
#seg.initialize(A) # A を遅延セグ木化
# from operator import add

ans = []
for _ in range(n):
    l,r = map(int,input().split())
    m = seg.prod(l-1, r) + 1
    ans.append(m)
    seg.range_apply(l-1, r, m)

for i in ans:
  print(i)

"""
K - Range Affine Range Sum

u_data = 0 # data の単位元
u_lazy = (1, 0) # lazy の単位元
 
def op_data(l, r): # d_Lとd_Rの二項演算, dataを返す
    return (l + r) % mod
 
def op_lazy(new, old): # lz_oidにlz_newを作用させる, lazyを返す
    return new[0] * old[0] % mod, (old[1] * new[0] + new[1]) % mod
 
def op_merge(lz, d, size): # dにlzを作用させる, dataを返す
    b, c = lz
    return (b * d + size * c) % mod
    
query_0 が Σ A[i] (l≤i≤r-1) を出力
query_1 が l≤i≤r-1 について A[i] を A[i]*b + c に更新する

X[l,r): Σ A[l,r)
lazy[i] (更新を保存しておく配列) の２つの配列をもち、

・op_data: X＊X →X (X[l≤i<r] から X[l,r) を求める）
・op_lazy: lazy＊lazy→lazy (lazy[i] を更新）
・op_merge: X＊lazy→X (lazy[i] を使って X[l,r) を更新、この時 l≤i<r について lazy[i] は全て同じ更新をしたと考える）

の3式と X と lazy の単位元が求まればライブラリにぶち込んで終わり。

query_0 より op_data は X[l,r) =X[l,m) + X[m,r) とすればよく、
query_1 については A[i] に query_1 を２回作用させると
A'[i] = A[i]*b1+c1
A”[i] = A'[i]*b2+c2 = A[i] * b2*b1 + c1*b2+c2 となるので
op_lazy は、lazy_old[i] = (b1,c1), 更新クエリ = (b2,c2) とすると、
lazy_new[i] =   (b2*b1, c1*b2+c2) とすればよい。

また、lazy[i] = (b,c) とすると、op_merge は
Σ X'[l,r)  = Σ X[l,r) * b + c * len[l,r) で計算できる

またこのとき、X の単位元 u_data は X[i] + u_data = x[i] より u_data = 0
M の単位元 u_lazy は X[i] * b + c = X[i] より u_lazy(b,c) = (1,0)
"""
