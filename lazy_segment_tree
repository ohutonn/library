競プロ典型 90 問 029 - Long Bricks（★5）
AtCoder Library Practice Contest K - Range Affine Range Sum

import sys
input = lambda: sys.stdin.readline().rstrip()
 
class LazySegmentTree():
    def __init__(self, init, unitX, unitA, f, g, h):
        self.f = f # (X, X) -> X
        self.g = g # (X, A, size) -> X
        self.h = h # (A, A) -> A
        self.unitX = unitX
        self.unitA = unitA
        self.f = f
        if type(init) == int:
            self.n = init
            # self.n = 1 << (self.n - 1).bit_length()
            self.X = [unitX] * (self.n * 2)
            self.size = [1] * (self.n * 2)
        else:
            self.n = len(init)
            # self.n = 1 << (self.n - 1).bit_length()
            self.X = [unitX] * self.n + init + [unitX] * (self.n - len(init))
            self.size = [0] * self.n + [1] * len(init) + [0] * (self.n - len(init))
            for i in range(self.n-1, 0, -1):
                self.X[i] = self.f(self.X[i*2], self.X[i*2|1])
    
        for i in range(self.n - 1, 0, -1):
            self.size[i] = self.size[i*2] + self.size[i*2|1]
        
        self.A = [unitA] * (self.n * 2)
        
    def update(self, i, x):
        i += self.n
        self.X[i] = x
        i >>= 1
        while i:
            self.X[i] = self.f(self.X[i*2], self.X[i*2|1])
            i >>= 1
    
    def calc(self, i):
        return self.g(self.X[i], self.A[i], self.size[i])
    
    def calc_above(self, i):
        i >>= 1
        while i:
            self.X[i] = self.f(self.calc(i*2), self.calc(i*2|1))
            i >>= 1
    
    def propagate(self, i):
        self.X[i] = self.g(self.X[i], self.A[i], self.size[i])
        self.A[i*2] = self.h(self.A[i*2], self.A[i])
        self.A[i*2|1] = self.h(self.A[i*2|1], self.A[i])
        self.A[i] = self.unitA
        
    def propagate_above(self, i):
        H = i.bit_length()
        for h in range(H, 0, -1):
            self.propagate(i >> h)
    
    def propagate_all(self):
        for i in range(1, self.n):
            self.propagate(i)
    
    def getrange(self, l, r):
        l += self.n
        r += self.n
        l0, r0 = l // (l & -l), r // (r & -r) - 1
        self.propagate_above(l0)
        self.propagate_above(r0)
        
        al = self.unitX
        ar = self.unitX
        while l < r:
            if l & 1:
                al = self.f(al, self.calc(l))
                l += 1
            if r & 1:
                r -= 1
                ar = self.f(self.calc(r), ar)
            l >>= 1
            r >>= 1
        return self.f(al, ar)
    
    def getvalue(self, i):
        i += self.n
        self.propagate_above(i)
        return self.calc(i)
    
    def operate_range(self, l, r, a):
        l += self.n
        r += self.n
        l0, r0 = l // (l & -l), r // (r & -r) - 1
        self.propagate_above(l0)
        self.propagate_above(r0)
        while l < r:
            if l & 1:
                self.A[l] = self.h(self.A[l], a)
                l += 1
            if r & 1:
                r -= 1
                self.A[r] = self.h(self.A[r], a)
            l >>= 1
            r >>= 1
        
        self.calc_above(l0)
        self.calc_above(r0)
    
    # Find r s.t. calc(l, ..., r-1) = True and calc(l, ..., r) = False
    def max_right(self, l, z):
        if l >= self.n: return self.n
        l += self.n
        s = self.unitX
        while 1:
            while l % 2 == 0:
                l >>= 1
            if not z(self.f(s, self.calc(l))):
                while l < self.n:
                    l *= 2
                    if z(self.f(s, self.calc(l))):
                        s = self.f(s, self.calc(l))
                        l += 1
                return l - self.n
            s = self.f(s, self.calc(l))
            l += 1
            if l & -l == l: break
        return self.n
    
    # Find l s.t. calc(l, ..., r-1) = True and calc(l-1, ..., r-1) = False
    def min_left(self, r, z):
        if r <= 0: return 0
        r += self.n
        s = self.unitX
        while 1:
            r -= 1
            while r > 1 and r % 2:
                r >>= 1
            if not z(self.f(self.calc(r), s)):
                while r < self.n:
                    r = r * 2 + 1
                    if z(self.f(self.calc(r), s)):
                        s = self.f(self.calc(r), s)
                        r -= 1
                return r + 1 - self.n
            s = self.f(self.calc(r), s)
            if r & -r == r: break
        return 0
 
P = 998244353
op_data = lambda x, y: (x + y) % P
op_lazy = lambda a, b: (a[0] * b[0] % P, (a[1] * b[0] + b[1]) % P)
op_merge = lambda x, a, s: (a[0] * x + a[1] * s) % P
unitX = 0
unitA = (1, 0)

N, Q = map(int, input().split())
A = [int(a) for a in input().split()]
st = LazySegmentTree(A, unitX, unitA, op_data, op_merge, op_lazy)
 
for _ in range(Q):
    q = [int(a) for a in input().split()]
    if q[0] == 0:
        l, r, b, c = q[1:]
        st.operate_range(l, r, (b, c))
    else:
        l, r = q[1:]
        print(st.getrange(l, r))
        

"""
K - Range Affine Range Sum

u_data = 0 # data の単位元
u_lazy = (1, 0) # lazy の単位元
 
def op_data(l, r): # d_Lとd_Rの二項演算, dataを返す
    return (l + r) % mod
 
def op_lazy(new, old): # lz_oidにlz_newを作用させる, lazyを返す
    return new[0] * old[0] % mod, (old[1] * new[0] + new[1]) % mod
 
def op_merge(lz, d, size): # dにlzを作用させる, dataを返す
    b, c = lz
    return (b * d + size * c) % mod
    
query_0 が Σ A[i] (l≤i≤r-1) を出力
query_1 が l≤i≤r-1 について A[i] を A[i]*b + c に更新する

X[l,r): Σ A[l,r)
lazy[i] (更新を保存しておく配列) の２つの配列をもち、

・op_data: X＊X →X (X[l≤i<r] から X[l,r) を求める）
・op_lazy: lazy＊lazy→lazy (lazy[i] を更新）
・op_merge: X＊lazy→X (lazy[i] を使って X[l,r) を更新、この時 l≤i<r について lazy[i] は全て同じ更新をしたと考える）

の3式と X と lazy の単位元が求まればライブラリにぶち込んで終わり。

query_0 より op_data は X[l,r) =X[l,m) + X[m,r) とすればよく、
query_1 については A[i] に query_1 を２回作用させると
A'[i] = A[i]*b1+c1
A”[i] = A'[i]*b2+c2 = A[i] * b2*b1 + c1*b2+c2 となるので
op_lazy は、lazy_old[i] = (b1,c1), 更新クエリ = (b2,c2) とすると、
lazy_new[i] =   (b2*b1, c1*b2+c2) とすればよい。

また、lazy[i] = (b,c) とすると、op_merge は
Σ X'[l,r)  = Σ X[l,r) * b + c * len[l,r) で計算できる

またこのとき、X の単位元 u_data は X[i] + u_data = x[i] より u_data = 0
M の単位元 u_lazy は X[i] * b + c = X[i] より u_lazy(b,c) = (1,0)
"""
